def opening():
    """ Just prints the opening of the game
    """
    HANGMAN_ASCII_ART = """       _    _
      | |  | |
      | |__| | __ _ _ __   __ _ _ __ ___   __ _ _ __
      |  __  |/ _' | '_ \ / _' | '_ ' _ \ / _' | '_ \ 
      | |  | | (_| | | | | (_| | | | | | | (_| | | | |
      |_|  |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                           __/ |
                          |___/ \n"""
    MAX_TRIES = 6
    print (HANGMAN_ASCII_ART, MAX_TRIES, sep = "")


def choose_word(file_path, index):
    """Gets a path of a text file with a repertoire of words and an integer.
    Return the number of unique words(not duplicates) and 
    :param file_path: path to a file
    :param index: number of desired word
    :type file_path: str
    :type index: int
    :return: the word in the position of the entered integer(index)
    :rtype: str    #used to be a tuple
    """
    file = open(file_path, "r")
    file_as_string = file.read()
    words_repertoire = file_as_string.split(" ")
    unique_words = []
    for word in words_repertoire:
        if word not in unique_words:
            unique_words.append(word)
    number_of_words = len(unique_words)
    
    count = 0
    word_position = 0
    while count < index - 1:
        chosen_word = words_repertoire[word_position]
        word_position += 1
        if word_position == words_repertoire.index(words_repertoire[-1]):
            word_position = 0
        count += 1
    file.close()
        
    result = chosen_word     # used to return number_of_words as well. as part of a tuple.
    print (result)
    return result

#opening()
#path = input("Please enter the file path: ")
#desired_word = int(input("Enter a random positive number: "))
#choose_word(path, desired_word)